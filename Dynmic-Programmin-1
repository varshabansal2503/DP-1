ANS:1--
Fibonacci Number---
class Solution {
  
    public int fib(int n) {
            int f[]=new int[n+1];
        if(n==0||n==1)
        {
            return n;
        }
        if(f[n]!=0)
        {
            return f[n];
        }
        f[n]=fib(n-1)+fib(n-2);
        return f[n];
    }
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ANS:2--
climbing stairs-


class Solution {
    public int climbStairs(int n) {
        int[] dp = new int[n + 1];
        Arrays.fill(dp, -1);
        return solve(n, dp);
    }

    private int solve(int n, int[] dp) {
        if (n < 0) return 0;
        if (n == 0) return 1;

        if (dp[n] != -1) return dp[n];

        dp[n] = solve(n - 1, dp) + solve(n - 2, dp);

        return dp[n];
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------
ANS:3--
Perfect Squares--

class Solution {
    public int numSquares(int n) {
        int[] memo = new int[n + 1];
        return helper(n, memo);
    }
      public int helper(int n, int[] memo) {
        if (n < 4)
            return n;
        
        if (memo[n] != 0)
            return memo[n];
        
        int ans = n;
        
        for (int i = 1; i * i <= n; i++) {
            int square = i * i;
            ans = Math.min(ans, 1 + helper(n - square, memo));
        }
        
        return memo[n] = ans;
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------
ANS:4--
. Decode Ways---

